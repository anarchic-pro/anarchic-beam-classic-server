plugins {
  id("org.jetbrains.kotlin.jvm")
}

def preMainClassName = "org.jetbrains.projector.agent.MainAgent"

compileKotlin {
  kotlinOptions.jvmTarget = targetJvm
}

repositories {
  maven { url "https://jitpack.io" }
}

dependencies {
  implementation("com.github.JetBrains.projector-client:projector-common:$projectorClientVersion")
  api(project(":projector-awt"))
  api(project(":projector-server"))
  implementation("org.javassist:javassist:$javassistVersion")
}

def inline = { deps -> deps.collect { it.isDirectory() ? it : zipTree(it) } }

Properties localProperties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
  localProperties.load(project.rootProject.file("local.properties").newDataInputStream())
}

def serverTargetClasspath = localProperties['projectorLauncher.targetClassPath']
def serverClassToLaunch = localProperties['projectorLauncher.classToLaunch']

jar {
  manifest {
    attributes(
      "Can-Redefine-Classes": true,
      "Can-Retransform-Classes": true,
      "Premain-Class": preMainClassName,
      )
  }

  from {
    inline(configurations.runtimeClasspath)  // todo: remove
  }
}

//Server running tasks
println("----------- Agent launch config ---------------")
println("Classpath: $serverTargetClasspath")
println("ClassToLaunch: $serverClassToLaunch")
println("------------------------------------------------")
if (serverTargetClasspath != null && serverClassToLaunch != null) {
  task runWithAgent(type: JavaExec) {
    group = "projector"
    main = serverClassToLaunch
    classpath(sourceSets.main.runtimeClasspath, jar, "$serverTargetClasspath")
    jvmArgs = [
      "-javaagent:${jar.outputs.files.singleFile}=${jar.outputs.files.singleFile}",
    ]
  }
}

def ideaPath = localProperties['projectorLauncher.ideaPath']
println("----------- Idea launch config ---------------")
println("Idea path: $ideaPath")
println("------------------------------------------------")
if (ideaPath != null) {
  def ideaLib = "$ideaPath/lib"
  def ideaClassPath = "$ideaLib/bootstrap.jar:$ideaLib/extensions.jar:$ideaLib/util.jar:$ideaLib/jdom.jar:$ideaLib/log4j.jar:$ideaLib/trove4j.jar:$ideaLib/jna.jar:$ideaPath/jbr/lib/tools.jar"
  def jdkHome = System.getProperty('java.home')

  println(jdkHome)

  task runIdeaWithAgent(type: JavaExec) {
    group = "projector"
    main = "com.intellij.idea.Main"
    classpath(sourceSets.main.runtimeClasspath, jar, "$ideaClassPath", "$jdkHome/../lib/tools.jar")
    jvmArgs = [
      "-javaagent:${jar.outputs.files.singleFile}=${jar.outputs.files.singleFile}",
      "-Dorg.jetbrains.projector.server.classToLaunch=com.intellij.idea.Main",
      "-Didea.paths.selector=ProjectorIntelliJIdea2019.3",
      "-Didea.jre.check=true",
      "-Didea.is.internal=true",
      "--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED",
      "--add-opens=java.desktop/java.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.font=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.awt=ALL-UNNAMED",
      "--add-opens=java.desktop/sun.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED",
      "--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
    ]
  }
}
